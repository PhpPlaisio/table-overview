<?xml version="1.0" encoding="UTF-8"?>
<project name="js-table-sorter-filter" default="build" basedir=".">
    <property name="BUILD_DIR" value="build"/>
    <property name="COMBINED_JS_FILE" value="set_table_sorter_filter.js"/>
    <property name="COMBINED_JS_FILE_MIN" value="set_table_sorter_filter-min.js"/>
    <target name="build" depends="prepare, copy_files, combine_js, minify_js">
    </target>

    <target name="prepare">
        <echo msg="Preparing files…"/>
        <if>
            <available file="${BUILD_DIR}" type="dir" property="build_dir_exists"/>
            <then>
                <echo msg="Removing old files…"/>
                <delete includeemptydirs="true" verbose="false" failonerror="true">
                    <fileset dir="${BUILD_DIR}">
                        <include name="**"/>
                    </fileset>
                </delete>
            </then>
            <else>
                <echo msg="Creating build dir…"/>
                <mkdir dir="${BUILD_DIR}"/>
            </else>
        </if>
    </target>

    <target name="copy_files">
        <echo msg="Copying main files…"/>
        <copy todir="${BUILD_DIR}" includeemptydirs="true" verbose="false">
            <fileset dir=".">
                <include name="**"/>
                <exclude name="build.xml"/>
                <exclude name="js/sources.txt"/>
            </fileset>
        </copy>
    </target>

    <target name="combine_js">
        <echo msg="Combining all js files into one…"/>
        <if>
            <available file="${BUILD_DIR}/${COMBINED_JS_FILE}" property="combine_js_file_exists"/>
            <then>
                <delete file="${BUILD_DIR}/${COMBINED_JS_FILE}"/>
            </then>
        </if>
        <append destFile="${BUILD_DIR}/${COMBINED_JS_FILE}">
            <filelist dir="${BUILD_DIR}/js" listfile="js/sources.txt"/>
        </append>

        <!-- Copy the combined JavaScript file to the project's root directory if this file has changed only. -->
        <if>
            <not>
                <available file="${COMBINED_JS_FILE}" property="combine_js_file_exists"/>
            </not>
            <then>
                <copy file="${BUILD_DIR}/${COMBINED_JS_FILE}" tofile="${COMBINED_JS_FILE}"/>
            </then>
            <else>
                <loadfile property="COMBINED_JS_FILE_OLD" file="${COMBINED_JS_FILE}"/>
                <loadfile property="COMBINED_JS_FILE_NEW" file="${BUILD_DIR}/${COMBINED_JS_FILE}"/>
                <if>
                    <not>
                        <equals arg1="${COMBINED_JS_FILE_OLD}" arg2="${COMBINED_JS_FILE_NEW}"/>
                    </not>
                    <then>
                        <copy file="${BUILD_DIR}/${COMBINED_JS_FILE}" tofile="${COMBINED_JS_FILE}"/>
                    </then>
                </if>
            </else>
        </if>
    </target>

    <target name="minify_js">
        <echo msg="Minifying JavaScript files…"/>
        <exec command="java -jar vendor/bin/yuicompressor.jar ${BUILD_DIR}/${COMBINED_JS_FILE} -o ${BUILD_DIR}/${COMBINED_JS_FILE_MIN}"
              passthru="true" checkreturn="true"/>

        <!-- Copy the minimized combined JavaScript file to the project's root directory if this file has changed
             only. -->
        <if>
            <not>
                <available file="${COMBINED_JS_FILE_MIN}" property="combine_js_min_file_exists"/>
            </not>
            <then>
                <copy file="${BUILD_DIR}/${COMBINED_JS_FILE_MIN}" tofile="${COMBINED_JS_FILE_MIN}"/>
            </then>
            <else>
                <loadfile property="COMBINED_JS_FILE_MIN_OLD" file="${COMBINED_JS_FILE_MIN}"/>
                <loadfile property="COMBINED_JS_FILE_MIN_NEW" file="${BUILD_DIR}/${COMBINED_JS_FILE_MIN}"/>
                <if>
                    <not>
                        <equals arg1="${COMBINED_JS_FILE_MIN_OLD}" arg2="${COMBINED_JS_FILE_MIN_NEW}"/>
                    </not>
                    <then>
                        <copy file="${BUILD_DIR}/${COMBINED_JS_FILE_MIN}" tofile="${COMBINED_JS_FILE_MIN}"
                              overwrite="true"/>
                    </then>
                </if>
            </else>
        </if>
    </target>

    <!-- Merges the current branch with a remote branch -->
    <target name="git-merge">
        <!-- Prevent conflicts in auto generated files. -->
        <delete file="set_table_sorter_filter.js"/>
        <delete file="set_table_sorter_filter-min.js"/>

        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="CURRENT_BRANCH"/>
        <input message="Your current branch is '${CURRENT_BRANCH}'. Remote branch: " propertyName="BRANCH"/>
        <gitbranch branchname="temp" repository="."/>
        <gitcheckout repository="." branchname="temp"/>
        <gitpull repository="." refspec="${BRANCH}" quiet="false"/>
        <gitcheckout repository="." branchname="${CURRENT_BRANCH}"/>
        <gitmerge repository="." remote="temp"/>
        <gitbranch branchname="temp" repository="." delete="true"/>

        <exec command="phing" checkreturn="true" passthru="true"/>
    </target>

    <!-- Merges the current branch with a remote branch in two steps: step 1 -->
    <target name="git-merge1">
        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="CURRENT_BRANCH" checkreturn="true"/>
        <exec command="git fetch -p" passthru="true" checkreturn="true"/>
        <input message="Your current branch is '${CURRENT_BRANCH}'. Remote branch: " propertyName="BRANCH"/>
        <gitbranch branchname="temp" repository="."/>
        <gitcheckout repository="." branchname="temp"/>
        <gitpull repository="." refspec="${BRANCH}" quiet="false"/>
    </target>

    <!-- Merges the current branch with a remote branch in two steps: step 2 -->
    <target name="git-merge2">
        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="CURRENT_BRANCH" checkreturn="true"/>
        <input message="Your current branch is '${CURRENT_BRANCH}'. Branch: " propertyName="BRANCH"/>
        <gitcheckout repository="." branchname="${BRANCH}"/>
        <gitmerge repository="." remote="temp"/>
        <gitbranch branchname="temp" repository="." delete="true"/>
    </target>
</project>
